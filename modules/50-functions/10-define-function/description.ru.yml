---
name: Определение функций
theory: |
  У каждой программы должна быть функция с именем `main`. С нее программа начинает выполняться при запуске. Но когда программа масштабируется, становится сложнее размещать весь код внутри этой функции. В этом случае используют функции, которые позволяют разделить программы на небольшие модульные части. Их легче организовать, тестировать и использовать.
  
  Большинство программ используют большое количество функций. Стандартная библиотека C++ поставляется с множеством уже написанных функций, которые можно использовать. При этом можно писать и свои. Такие функции называются пользовательскими. В этом уроке рассмотрим...
  
  // Нужно дописать, что рассмотрим в этом уроке, чему науимся, что разберем, узнаем.
  
  // Ту часть оставим как введение. А здесь нужно сделать заголовок- о чем говорим в этом блоке.

  Представим, что мы читаем книгу и вспоминаем, что нам нужно сделать звонок. Мы оставляем закладку, говорим по телефону и возвращаемся читать книгу с того места, где оставили закладку.

  Программы на C++ могут работать так же. Программа будет последовательно выполнять инструкции внутри одной функции, пока не обнаружит вызов другой функции.
  
  **Вызов функции** — это выражение, которое говорит CPU прервать текущую функцию и выполнить другую. Получается, что CPU «помещает закладку» в текущую точку выполнения, а затем вызывает функцию, указанную в вызове функции. Когда вызываемая функция завершается, CPU возвращается в точку, которая отмечена закладкой, и возобновляет выполнение.
  
  // Здесь нужен плавный переход. Нужно написать, что по типу: "разберемся, как определять такую фукнцию (уточнить какую)
  
  // И тут можно сделать следующий заголовок - про что будем рассказывать в этом блоке

  Начнем с базового синтаксиса для определения пользовательской функции. В этом уроке все пользовательские функции кроме `main` будут иметь следующий вид:

  ```cpp
  тип_возвращаемого_значения идентификатор(параметры функции) { // идентификатор заменяется именем вашей функции
    // ваш код здесь
  }
  ```

  Подробнее о различных частях этого синтаксиса поговорим в следующих уроках. На данный момент идентификатор будет просто заменен именем нашей пользовательской функции. Фигурные скобки и инструкции между ними называются **телом функции**.

  Рассмотрим пример программы, которая показывает, как определяется и вызывается новая функция:

  ```cpp
  void Greating() {
    std::cout << "Hello Code Basics!";
  }
 

  int main() {
    std::cout << "Starting main() << std::endl";
    // Прерываем main(), вызывая функцию Greating().
    Greating();
    // эта инструкция выполняется после завершения Greating()
    std::cout << "Ending main() << std::endl;
 
    return 0;
  }
  ```

  // После каждого кода нужно пояснение - на что нужно обратить внимание в коде или что сделали
  
  Эта программа создает следующий вывод:

  <pre class='hexlet-basics-output'>
    Starting main()
    Hello Code Basics!
    Ending main()
  </pre>

  Программа начинает выполняться с начала функции `main`. Первая строка, которая будет выполняться, выводит текст `Starting main()`. Вторая строка в `main` — это вызов функции `Greating()`. Мы вызываем функцию `Greating()`, добавляя скобки к имени функции, например: `Greating()`. Если забыть про скобки, программа может не компилироваться.
  
  // Студент будет понимать на этом этапе обучения, что такое "компилироваться"? если нет, нужно либо лругими словами сказать либо пояснить.
  
  Так как мы вызвали функцию, выполнение инструкций в `main` приостанавливается. В итоге выполнение переходит к началу вызываемой функции `Greating()`.
  
  Первая и единственная строка в `Greating()` печатает текст `Hello Code Basics!`. Когда `Greating()` завершается, выполнение возвращается к вызывающей функции — здесь: функция `main`. Далее оно возобновляется с того места, где остановилось. Получается, следующая инструкция, которая выполняется в `main`, выводит на печать `Ending main()`.
  
  ## Особенность функций

  Полезная особенность функций заключается в том, что их можно вызывать более одного раза в разных частях программы. Вот программа, которая демонстрирует это:

  ```cpp
  void Greating() {
    std::cout << "Hello Code Basics!";
  }

  int main() {
    Greating();
    Greating();
    return 0;
  }
  ```
  
  // После каждого кода нужно пояснение - на что нужно обратить внимание в коде или что сделали
  
  Эта программа создает следующий вывод:

  <pre class='hexlet-basics-output'>
    Hello Code Basics!
    Hello Code Basics!
  </pre>
  
  // После каждого кода нужно пояснение - на что нужно обратить внимание в коде или что сделали
  
  В отличие от некоторых других языков программирования в C++ функции не могут быть определены внутри других функций. Следующая программа не является корректной:

  ```cpp
  int main() {
    void Greating() {
      std::cout << "Hello Code Basics!";
    }
    Greating();
    return 0;
  }
  ```
  
  // После каждого кода нужно пояснение - на что нужно обратить внимание в коде или что сделали
  
  // Ну и тут не хватает кого-то логического завршения урока. Просто обрубили сейчас. Нужно как то подытожить, сделать вывод.

instructions: |
  Напишите функцию `PrintMoto()`, которая выводит на экран фразу `Spring is coming`, и вызовите ее внутри функции `main`.

tips:
  - |
    [Функции в С++](https://learn.microsoft.com/ru-ru/cpp/cpp/functions-cpp?view=msvc-170)
